# Dockerfile Monorepo - Frontend + Backend para EasyPanel
FROM node:18-alpine as frontend-build

# Instalar dependências do sistema
RUN apk add --no-cache git

# Criar diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências do frontend
COPY package*.json ./

# Instalar dependências do frontend (incluindo devDependencies para build)
RUN npm ci --silent

# Copiar código fonte do frontend
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
COPY vite.config.ts ./
COPY tsconfig*.json ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY landing-page.html ./

# Configurar variáveis de ambiente para build
ARG VITE_API_URL="/api"
ENV VITE_API_URL=$VITE_API_URL

# Build da aplicação frontend
RUN npm run build

# Estágio de produção
FROM node:18-alpine

# Instalar dependências do sistema
RUN apk add --no-cache nginx wget dumb-init

# Criar diretórios necessários
WORKDIR /app

# Copiar arquivos buildados do frontend
COPY --from=frontend-build /app/dist /usr/share/nginx/html
COPY --from=frontend-build /app/landing-page.html /usr/share/nginx/html/

# Copiar backend
COPY backend/package*.json ./backend/
WORKDIR /app/backend
RUN npm ci --only=production --silent && npm cache clean --force

COPY backend/src/ ./src/
COPY backend/*.html ./

# Configuração do Nginx (limpar configs antigas e usar nova)
RUN rm -f /etc/nginx/conf.d/default.conf /etc/nginx/sites-enabled/default
COPY nginx.minimal.conf /etc/nginx/nginx.conf

# Criar usuário não-root
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Criar diretórios nginx e ajustar permissões
RUN mkdir -p /var/cache/nginx /var/run/nginx /var/log/nginx /var/lib/nginx/logs
RUN touch /var/log/nginx/access.log /var/log/nginx/error.log
RUN chown -R appuser:appuser /app /usr/share/nginx/html /var/cache/nginx /var/run/nginx /var/log/nginx /var/lib/nginx
RUN chmod -R 755 /usr/share/nginx/html

# Script de inicialização
COPY <<EOF /app/start.sh
#!/bin/sh
# Iniciar backend em background
cd /app/backend && node src/server.js &

# Aguardar um pouco para o backend iniciar
sleep 2

# Iniciar nginx em foreground (sem daemon, com usuário atual)
exec nginx -g 'daemon off;'
EOF

RUN chmod +x /app/start.sh && chown appuser:appuser /app/start.sh

# Usar usuário não-root
USER appuser

# Expor portas
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1

# Usar dumb-init para melhor handling de sinais
ENTRYPOINT ["dumb-init", "--"]

# Comando para iniciar ambos os serviços
CMD ["/app/start.sh"]